bool isSafe(int i,int j,char ch,vector<vector<char>>& board,int n){
        for(int k=0;k<n;k++){
            //row check
            if(board[i][k]==ch){
                return false;
            }
            //col check
            if(board[k][j]==ch){
                return false;
            }
            //3x3 box check
            if(board[3*(i/3)+(k/3)][3*(j/3)+(k%3)]==ch){
                return false;
            }
        }
        return true;
    }
    bool solve(vector<vector<char>>& board,int n){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
            //fill only if cell is empty
                if(board[i][j]=='.'){
                    for(char ch='1';ch<='9';ch++){
                        if(isSafe(i,j,ch,board,n)){
                            board[i][j]=ch;
                            bool aageKaAns=solve(board,n);
                            if(aageKaAns==true){
                                return true;
                            }
                            else{
                                //backtrack
                                board[i][j]='.';
                            }
                        }
                    }
                    //we tried all values but nothing gives ans so it means that something wrong is filled in prev boxes therefore backtrack
                    return false;
                }
            }
        }
        //each box is already filled
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        int n=board.size();
        bool ans=solve(board,n);
        return;
    }
