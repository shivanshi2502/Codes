#include <iostream>
#include<queue>
using namespace std;

class heap{
    public:
    int arr[1000];
    int size;
    
    heap(){
        size=0;
        arr[size]=-1;
    }
    
    void insert(int data){
        //insert value at end
        size=size+1;
        arr[size]=data;
        
        //place it at correct position
        int index=size;
        int parentIndex=index/2;
        while(index>1){
            parentIndex=index/2;
            if(arr[parentIndex]<arr[index]){
                swap(arr[parentIndex],arr[index]);
                index=parentIndex;
            }
            else{
                break;
            }
        }
    }
    
    void deletion(){
        //swap with last element
        swap(arr[1],arr[size]);
        size--;
        //place top at correct position now
        int index=1;
        while(index<=size){
            int leftChild=2*index;
            int rightChild=leftChild+1;
            int largest=index;
            if(leftChild<=size && arr[leftChild]>arr[largest]){
                largest=leftChild;
            }
            if(rightChild<=size && arr[rightChild]>arr[largest]){
                largest=rightChild;
            }
            if(largest!=index){
                swap(arr[largest],arr[index]);
                index=largest;
            }
            else{
                break;
            }
        }
    }
};

void heapify(int arr[],int n,int i){
    int index=i;
    while(index<=n){
        int left=2*index;
        int right=left+1;
        int largest=index;
        if(left<=n && arr[left]>arr[largest]){
            largest=left;
        }
        if(right<=n && arr[right]>arr[largest]){
            largest=right;
        }
        if(largest!=index){
            swap(arr[index],arr[largest]);
            index=largest;
        }
        else{
            break;
        }
    }
}

void buildHeap(int arr[],int n){
    for(int i=n/2;i>0;i--){
        heapify(arr,n,i);
    }
}

void heapSort(int arr[],int n){
    if(n==1){
        return;
    }
    swap(arr[1],arr[n]);
    n--;
    heapify(arr,n,1);
    heapSort(arr,n);
}

int main()
{
    //checking insert function
    heap h;
    h.insert(100);
    h.insert(50);
    h.insert(60);
    h.insert(40);
    h.insert(45);
    cout<<"printing the heap"<<endl;
    for(int i=1;i<=h.size;i++){
        cout<<h.arr[i]<<" ";
    }
    cout<<endl;
    h.insert(110);
    cout<<"printing the heap"<<endl;
    for(int i=1;i<=h.size;i++){
        cout<<h.arr[i]<<" ";
    }
    cout<<endl;
    //checking deletion function
    h.deletion();
    cout<<"printing the heap"<<endl;
    for(int i=1;i<=h.size;i++){
        cout<<h.arr[i]<<" ";
    }
    cout<<endl;
    //checking build heap and heapSort function
    int arr[6]={-1,100,50,60,20,30};
    int size=5;
    buildHeap(arr,5);
    heapSort(arr,size);
    cout<<"printing the heap"<<endl;
    for(int i=1;i<=size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
