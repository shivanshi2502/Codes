#include <iostream>
using namespace std;
int dp[4][5];
int solveUsingRec(int wt[],int val[],int W,int n){
    if(n==0||W==0){
        return 0;
    }
    if(wt[n-1]<=W){
        return max(val[n-1]+solveUsingRec(wt,val,W-wt[n-1],n-1),solveUsingRec(wt,val,W,n-1));
    }
    else{
        return solveUsingRec(wt,val,W,n-1);
    }
}

int solveUsingMem(int wt[],int val[],int W,int n){
    if(n==0||W==0){
        return 0;
    }
    if(dp[n][W]!=0){
        return dp[n][W];
    }
    if(wt[n-1]<=W){
        return dp[n][W]=max(val[n-1]+solveUsingRec(wt,val,W-wt[n-1],n-1),solveUsingRec(wt,val,W,n-1));
    }
    else{
        return dp[n][W]=solveUsingRec(wt,val,W,n-1);
    }
    return dp[n][W];
}

int BottomUp(int wt[],int val[],int W,int n){
    int dp[n+1][W+1];
    for(int i=0;i<n+1;i++){
        for(int j=0;j<W+1;j++){
            if(i==0||j==0){
                dp[i][j]=0;
            }
        }
    }
    for(int i=1;i<n+1;i++){
        for(int j=1;j<W+1;j++){
            if(wt[i-1]<=W){
                dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
            }
            else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][W];
}

int main()
{
    int wt[3]={4,5,1};
    int val[3]={1,2,3};
    int W=4;
    int n=3;
    cout<<solveUsingRec(wt,val,W,n);
    for(int i=0;i<n+1;i++){
        for(int j=0;j<W+1;j++){
            if(i==0||j==0){
                dp[i][j]=0;
            }
        }
    }
    cout<<solveUsingMem(wt,val,W,n);
    cout<<BottomUp(wt,val,W,n);
}
