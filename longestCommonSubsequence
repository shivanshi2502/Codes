
//recursion
int LCS(string text1,int len1,string text2,int len2){
        if(len1==0||len2==0){
            return 0;
        }
        if(text1[len1-1]==text2[len2-1]){
            return 1+LCS(text1,len1-1,text2,len2-1);
        }
        else{
            return max(LCS(text1,len1-1,text2,len2),LCS(text1,len1,text2,len2-1));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        return LCS(text1,text1.length(),text2,text2.length());
    }
    //top-down
    int LCSMem(string &text1, string &text2,int len1,int len2,vector<vector<int>>&dp){
        if(len1==0||len2==0){
            return 0;
        }
        if(dp[len1][len2]!=-1){
            return dp[len1][len2];
        }
        if(text1[len1-1]==text2[len2-1]){
            return dp[len1][len2]=1+LCSMem(text1,text2,len1-1,len2-1,dp);
        }
        else{
            return dp[len1][len2]=max(LCSMem(text1,text2,len1-1,len2,dp),LCSMem(text1,text2,len1,len2-1,dp));
        }
    }
    int longestCommonSubsequence(string text1, string text2){
        int m=text1.length();
        int n=text2.length();
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        return LCSMem(text1,text2,m,n,dp);
    }
//bottom-up
    int longestCommonSubsequence(string text1, string text2){
        int m=text1.length();
        int n=text2.length();
        vector<vector<int>>dp(m+1, vector<int>(n+1,0));
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
