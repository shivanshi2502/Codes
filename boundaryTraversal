#include <iostream>
#include<queue>
#include<map>
#include<vector>
using namespace std;

class Node{
    public:
    int data;
    Node*left;
    Node*right;
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

Node* buildTreeRec(){
    int data;
    cout<<"Enter data: "<<endl;
    cin>>data;
    if(data==-1){
        return NULL;
    }
    else{
        Node* root= new Node(data);
        cout<<"Enter data to left of "<<data<<endl;
        root->left=buildTreeRec();
        cout<<"Enter data to right of "<<data<<endl;
        root->right=buildTreeRec();
        return root;
    }
}

void leftpart(Node* root){
    if(root==NULL){
        return;
    }
    if(root->left==NULL && root->right==NULL){
        return;
    }
    cout<<root->data<<" ";
    if(root->left){
        leftpart(root->left);
    }
}

void leafNodes(Node*root){
    if(root==NULL){
        return;
    }
    if(root->left==NULL&&root->right==NULL){
        cout<<root->data<<" ";
    }
    leafNodes(root->left);
    leafNodes(root->right);
}

void rightpart(Node*root){
    if(root==NULL){
        return;
    }
    if(root->left==NULL && root->right==NULL){
        return;
    }
    rightpart(root->right);
    cout<<root->data<<" ";
}

void boundaryTraversal(Node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    leftpart(root->left);
    leafNodes(root);
    rightpart(root->right);
}

int main()
{
    Node* root=buildTreeRec();
    cout<<"printing boundary traversal"<<endl;
    boundaryTraversal(root);
}
