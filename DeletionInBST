#include <iostream>
#include<queue>
using namespace std;

class Node{
    public:
    int data;
    Node*left;
    Node*right;
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

Node* insertIntoBST(Node* &root,int data){
    if(root==NULL){
        root=new Node(data);
        return root;
    }
    if(data!=-1){
        if(data<root->data){
            root->left=insertIntoBST(root->left,data);
        }
        else{
            root->right=insertIntoBST(root->right,data);
        }
    }
    return root;
}

void LevelOrderTraversal2(Node* root){
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node*temp=q.front();
        q.pop();
        if(temp!=NULL){
            cout<<temp->data<<" ";
            if(temp->left){
            q.push(temp->left);
            }
            if(temp->right){
            q.push(temp->right);
            }
        }
        else{
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
    }
}
void TakeInput(Node* &root){
    int data;
    cout<<"enter the data"<<endl;
    cin>>data;
    while(data!=-1){
        root=insertIntoBST(root,data);
        cin>>data;
    }
    return;
}

bool Search(Node*root,int target){
    if(root==NULL){
        return false;
    }
    if(root->data==target){
        return true;
    }
    else if(root->data > target){
        return Search(root->left,target);
    }
    else{
        return Search(root->right,target);
    }
}

int MinVal(Node*root){
    if(root== NULL){
        return -1;
    }
    Node*temp=root;
    while(temp->left!=NULL){
        temp=temp->left;
    }
    return temp->data;
}

int MaxVal(Node*root){
    if(root== NULL){
        return -1;
    }
    Node*temp=root;
    while(temp->right!=NULL){
        temp=temp->right;
    }
    return temp->data;
}

int InoPred(Node* root){
    return MaxVal(root->left);
}

int InoSucc(Node* root){
    return MinVal(root->right);
}

Node* deleteInBST(Node* root,int target){
    if(root==NULL){
        return root;
    }
    if(root->data==target){
        //4 cases
        
        //leaf Node
        if(root->left==NULL && root->right==NULL){
            delete root;
            return NULL;
        }
        //only has left Node
        else if(root->left!=NULL && root->right==NULL){
            Node*temp=root;
            root=root->left;
            delete temp;
            return root;
        }
        //only has right Node
        else if(root->left==NULL && root->right!=NULL){
            Node*temp=root;
            root=root->right;
            delete temp;
            return root;
        }
        //has both
        else{
            int pred=InoPred(root);
            root->data=pred;
            root->left=deleteInBST(root->left,pred);
            return root;
        }
    }
    else if(target<root->data){
        root->left=deleteInBST(root->left,target);
        return root;
    }
    else{
        root->right=deleteInBST(root->right,target);
        return root;
    }
    return root;
}

int main()
{
    Node*root=NULL;
    TakeInput(root);
    cout<<"Printing tree"<<endl;
    LevelOrderTraversal2(root);
    cout<<endl;
    cout<<"deleting the elem "<<endl;
    root=deleteInBST(root,20);
    LevelOrderTraversal2(root);
    cout<<endl;
}
