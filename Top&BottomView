#include <iostream>
#include<queue>
#include<map>
#include<unordered_map>
using namespace std;

class Node{
    public:
    int data;
    Node*left;
    Node*right;
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

Node* buildTreeRec(){
    int data;
    cout<<"Enter data: "<<endl;
    cin>>data;
    if(data==-1){
        return NULL;
    }
    else{
        Node* root= new Node(data);
        cout<<"Enter data to left of "<<data<<endl;
        root->left=buildTreeRec();
        cout<<"Enter data to right of "<<data<<endl;
        root->right=buildTreeRec();
        return root;
    }
}
void TopView(Node* root){
    if(root==NULL){
        return;
    }
    map<int,int>mp;
    queue<pair<Node*,int>>q;
    q.push(make_pair(root,0));
    while(!q.empty()){
        pair<Node*,int>temp=q.front();
        q.pop();
        if(mp.find(temp.second)==mp.end()){
            mp[temp.second]=temp.first->data;
        }
        if(temp.first->left){
            q.push(make_pair(temp.first->left,temp.second-1));
        }
        if(temp.first->right){
            q.push(make_pair(temp.first->right,temp.second+1));
        }
    }
    for(auto i:mp){
        cout<<i.first<<"->"<<i.second<<endl;
    }
}
void BottomView(Node*root){
    if(root==NULL){
        return;
    }
    map<int,int>mp;
    queue<pair<Node*,int>>q;
    q.push(make_pair(root,0));
    while(!q.empty()){
        pair<Node*,int>temp=q.front();
        q.pop();
        mp[temp.second]=temp.first->data;
        if(temp.first->left){
            q.push(make_pair(temp.first->left,temp.second-1));
        }
        if(temp.first->right){
            q.push(make_pair(temp.first->right,temp.second+1));
        }
    }
    for(auto i:mp){
        cout<<i.first<<"->"<<i.second<<endl;
    }
}
int main()
{
    Node* root=buildTreeRec();
    cout<<"printing top view "<<endl;
    TopView(root);
    cout<<"printing bottom view "<<endl;
    BottomView(root);
}
