// Method 1: using map

Node* helper1(Node* &head,unordered_map<Node*,Node*>& mp){
        if(head==NULL){
            return head;
        }
        Node* newhead=new Node(head->val);
        mp[head]=newhead;
        newhead->next=helper1(head->next,mp);
        if(head->random!=NULL){
            newhead->random=mp[head->random];
        }
        else{
            newhead->random=NULL;
        }
        return newhead;
    }
    Node* copyRandomList(Node* head) {
        unordered_map<Node*,Node*> mp;
        return helper1(head,mp);
    }


// Method 2
Node* helper2(Node*&head){
        if(head==NULL){
            return head;
        }
        Node* temp=head;
        while(temp!=NULL){
            Node* newNode=new Node(temp->val);
            newNode->next=temp->next;
            temp->next=newNode;
            temp=temp->next->next;
        }
        temp=head;
        Node*clonehead=head->next;
        Node*clonetemp=clonehead;
        while(temp!=NULL){
            if(temp->random!=NULL){
                clonetemp->random=temp->random->next;
            }
            else{
                clonetemp->random=NULL;
            }
            temp=temp->next->next;
            if(temp!=NULL){
                clonetemp=clonetemp->next->next;
            }
        }
        temp=head;
        clonetemp=clonehead;
        while(temp!=NULL){
            temp->next=temp->next->next;
            if(clonetemp->next!=NULL){
                clonetemp->next=clonetemp->next->next;
            }
            else{
                clonetemp->next=NULL;
            }
            temp=temp->next;
            clonetemp=clonetemp->next;
        }
        return clonehead;
    }
    Node* copyRandomList(Node* head) {
        return helper2(head);
    }
