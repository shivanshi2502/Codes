vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        deque<int>index;
        for(int i=0;i<k;i++){
            if(index.empty()){
                index.push_back(i);
            }
            else{
                if(nums[i]>=nums[index.back()]){
                    while(!index.empty() && nums[i]>=nums[index.back()]){
                    index.pop_back();
                    }
                    index.push_back(i);
                }
                else{
                    index.push_back(i);
                }
            }
        }
        for(int i=k;i<nums.size();i++){
            //storing ans for last pass
            ans.push_back(nums[index.front()]);
            //check for removal of elem outside curr window
            if(!index.empty() && i-index.front()>=k){
                index.pop_front();
            }
            //check for curr elem
            if(index.empty()){
                index.push_back(i);
            }
            else{
                if(nums[i]>=nums[index.back()]){
                    while(!index.empty() && nums[i]>=nums[index.back()]){
                    index.pop_back();
                    }
                    index.push_back(i);
                }
                else{
                    index.push_back(i);
                }
            }
        }
        ans.push_back(nums[index.front()]);
        return ans;
    }
